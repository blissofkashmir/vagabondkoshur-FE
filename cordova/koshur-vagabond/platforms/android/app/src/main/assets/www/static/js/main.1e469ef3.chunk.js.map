{"version":3,"sources":["views/login/fb-login/fb-login.js","views/signup/signup.js","views/login/login.js","App.js","serviceWorker.js","index.js"],"names":["responseFacebook","response","console","log","FbLogin","props","react_default","a","createElement","Fragment","facebook_login_render_props_default","appId","fields","callback","render","renderProps","onClick","className","SignUp","type","name","placeholder","value","Login","onChange","e","onInputUserName","target","onInputPassword","href","validateUser","react_router_dom","to","fb_login_fb_login","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","userName","password","attemptedUserName","attemptedPassword","bind","assertThisInitialized","setState","_this2","react_router","exact","path","component","signup_signup","Component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1e469ef3.chunk.js","sourcesContent":["import React from 'react';\r\nimport FacebookLogin from 'react-facebook-login/dist/facebook-login-render-props'\r\nimport './fb-login.css';\r\n\r\n\r\nconst responseFacebook = (response) => {\r\n    console.log(response);\r\n}\r\n\r\n\r\nconst FbLogin = (props) =>{\r\n\r\n        return(\r\n\r\n            <React.Fragment>\r\n                <FacebookLogin\r\n                appId=\"383262298942413\"\r\n                fields=\"name,email,picture\"\r\n                callback={responseFacebook} \r\n                render={renderProps => (\r\n                    <button onClick={renderProps.onClick} className='koshurvagabond-form-FB-button'>Log In with FaceBook</button>\r\n                )}\r\n                />\r\n            </React.Fragment>\r\n\r\n        );\r\n\r\n}\r\n\r\nexport default FbLogin;","import React from 'react';\r\nimport './signup.css';\r\n\r\n\r\nconst SignUp = (props) =>{\r\n\r\n        \r\n        return(\r\n\r\n            <div className='koshurvagabond-views-signup-form'>\r\n                <h1 className=\"koshurvagabond-title-text\">Sign Up!</h1>\r\n\r\n                <input className='koshurvagabond-form-input koshurvagabond-views-formitem' type=\"email\" name=\"email\" \r\n                placeholder=\"Email\"/>\r\n\r\n                <input className='koshurvagabond-form-input koshurvagabond-views-formitem' type=\"password\" name=\"password\" \r\n                placeholder=\"Password\"/>\r\n\r\n                <input className='koshurvagabond-form-input koshurvagabond-views-formitem' type=\"text\" name=\"confirmpassword\" \r\n                placeholder=\"Confirm Password\"/>\r\n\r\n                <input className='koshurvagabond-form-btn koshurvagabond-views-signup-btn' \r\n                    type=\"submit\" value=\"Sign up\"/>\r\n            </div>\r\n        );\r\n\r\n}\r\n\r\nexport default SignUp;","import React from 'react';\r\nimport FbLogin from './fb-login/fb-login';\r\nimport './login.css';\r\nimport SignUp from '../signup/signup';\r\nimport {Link, Route} from 'react-router-dom'\r\n\r\n\r\n\r\nconst onInputUserName = (e, props) => {\r\n\r\n    props.onInputUserName(e.target.value);\r\n\r\n}\r\n\r\nconst onInputPassword = (e, props) => {\r\n\r\n    props.onInputPassword(e.target.value);\r\n\r\n}\r\n\r\nconst Login = (props) =>{\r\n\r\n        \r\n        return(\r\n\r\n            <div className='koshurvagabond-views-login-form'>\r\n                <h1 className=\"koshurvagabond-title-text\">LOG IN</h1>\r\n\r\n                <input className='koshurvagabond-form-input koshurvagabond-views-formitem' type=\"text\" name=\"username\" \r\n                placeholder=\"Email\" onChange={(e)=>{onInputUserName(e, props)}}/>\r\n\r\n                <div className='form-box'>\r\n                     <input className='koshurvagabond-form-input koshurvagabond-views-formitem' type=\"password\" name=\"password\" \r\n                     placeholder=\"Password\" onChange={(e)=>{onInputPassword(e, props)}}/>\r\n                     <a href='#'>Forgot your password?</a>\r\n                </div>\r\n                \r\n                <div className='form-box'>\r\n\r\n                    <input className='koshurvagabond-form-btn koshurvagabond-views-login-btn' \r\n                    type=\"submit\" value=\"Login\"\r\n                    onClick={(e)=>{props.validateUser();}}/>\r\n\r\n                    <Link to=\"/signup\">Sign up!</Link>\r\n                </div>\r\n                \r\n\r\n\r\n                <div className='koshurvagabond-views-login-socialmedia'>\r\n                    <FbLogin></FbLogin>\r\n                </div>\r\n                \r\n                \r\n                \r\n            </div>\r\n        );\r\n\r\n}\r\n\r\nexport default Login;","import React, { Component } from 'react';\r\nimport Login from './views/login/login';\r\nimport './App.css';\r\nimport SignUp from './views/signup/signup';\r\nimport { HashRouter, Route } from 'react-router-dom';\r\n\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props){\r\n\r\n    super(props);\r\n\r\n    this.state = {\r\n\r\n      userName:'amjad',\r\n      password:'aaa',\r\n      attemptedUserName:'',\r\n      attemptedPassword:''\r\n\r\n    };\r\n\r\n    this.validateUser = this.validateUser.bind(this);\r\n    this.onInputUserName = this.onInputUserName.bind(this);\r\n    this.onInputPassword = this.onInputPassword.bind(this);\r\n\r\n  }\r\n\r\n  validateUser(attemptedUserName,attemptedPassword){\r\n\r\n    if(this.state.attemptedUserName === this.state.userName){\r\n\r\n      if(this.state.attemptedPassword === this.state.password){\r\n\r\n        console.log(\"Login Successful\");\r\n        return;\r\n      }\r\n    }\r\n\r\n    console.log(\"Login Unsuccessful\");\r\n  }\r\n\r\n  onInputUserName(attemptedUserName){\r\n\r\n    this.setState(\r\n      {attemptedUserName}\r\n    )\r\n\r\n  }\r\n\r\n  onInputPassword(attemptedPassword){\r\n\r\n    this.setState(\r\n      {attemptedPassword}\r\n    )\r\n\r\n  }\r\n  \r\n  render() {\r\n    //Main Application File\r\n    return (\r\n      <HashRouter>\r\n        <div className=\"app-container\">\r\n          <Route exact path=\"/\" component={Login}></Route>\r\n          <Route render={(props) => <SignUp validateUser={this.validateUser} onInputUserName={this.onInputUserName} onInputPassword={this.onInputPassword} />}\r\n          path=\"/signup\"></Route>\r\n        </div>\r\n      </HashRouter>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// This file was edited directly on the git hub server... bla bla bla.... Some MOre bla bla bal #####\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}